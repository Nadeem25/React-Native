Create React Native Project
1. npx create-expo-app --template

React-Native: It is an open source Framework for building native Android and IOS applications using React.
--> Javascript to access platform specific API (such as camera and push notification)
--> React components to define the appearance and behaviour of user Interface.

0. Flex Direction: 
Main Axis: Top to Buttom
Cross Axis: Left to Right
     0.1: Direction "column" :--> Top to buttom
     0.2: Direction "row": --> left to right
     0.3: JustifyContent: It define the alignment along the main axis
     0.4: alignItems: It define the default behaviour for laying out flex items along the container's cross axis


1. Core Component:
    1.1: View: View components can be compared to the <div> tag. 
         It is typically nested inside other <View> and can have zero or  more children of any type.
    1.2: Text:
    1.3. Image and ImageBackgroung
    1.4. ScrollView: Provide scrolling functionality. It has plateform specific.
    1.5. Button: It has plateform specific rendering for IOS and Android.( plateform specific means same button will appear different in IOS and Android)
    1.6. Pressable
    1.6. Modal
    1.7. AactivityIndicator: It display circular loading AactivityIndicator for loading an app, submitting form and saving updates.

2. Styles in React Native: It does not use CSS for styling. We use Javascript for styling. Names writen in camelcase.
     2.1. Inline Styles: Eg. <View style={{ flex: 1, backgroundColor: 'plum' }}/>
     2.2. StyleSheet API


3. Layout with Flex: It is one dimensional layout model used to arrange elements within a container. With flexbox, we have the freedom to arrange items
     either horizontally or vrtically.It consists of two entities and have two axes.
     3.1. Flex container
     3.2. Flex Items
     
     -- Axes----
     3.3. Main Axis
     3.4. Cross Axis

4. Relative and Absolute Layout: The layout are based on the position poroperty, which define how element is positioned within its parent container
     4.1. Relative Layout: 
          4.1.1.  In this layout, an element is position according to the normal flow of the layout.
          4.1.2.  It remains in its original position and can be offset from that position using top, right, buttom and left values.
          4.1.3. This offset does not affect the positioning of any sibling and parents elements.
     
     4.2. Absolute Layout:
          4.2.1. In this layout, element does not participate in the normal flow of the layout.
          4.2.2. It is instead laid out independently of its siblings.
          4.2.3. The position of the element is determine by the top, right, buttom and left values which specify specific cordinates relative to its parent container.



5. Dimension API: It provides the access to the Device size
Drawback: Dimension values does not update dynamically
useWindowDimension(): Provide Device size

6. Plateform Specific Code: 
     6.1. When developing cross plateform app, maximizing code reuse is a priority. There situation where it becomes neccessary to tailor your code to specific plateforms . It offer tow approaches
     6.1.1: Plateform Modules
     6.1.2: Plateform specifix file extension: 

7. FlatList: It renders only the item currently in view, making it hightly perfomant for long list
